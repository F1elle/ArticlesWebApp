// <auto-generated />
using System;
using ArticlesWebApp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArticlesWebApp.Api.Migrations
{
    [DbContext(typeof(ArticlesDbContext))]
    partial class ArticlesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.ArticlesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.CommentsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ArticleId", "OwnerId")
                        .IsUnique();

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.LikesEntity", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Likes", (string)null);
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.RolesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "User",
                            Permissions = "[1,2,3,4]"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Admin",
                            Permissions = "[1,2,3,4,5,6]"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SuperAdmin",
                            Permissions = "[1,2,3,4,5,6,7]"
                        });
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.UsersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("RegisterDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.ArticlesEntity", b =>
                {
                    b.HasOne("ArticlesWebApp.Api.Entities.UsersEntity", null)
                        .WithMany("Articles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.CommentsEntity", b =>
                {
                    b.HasOne("ArticlesWebApp.Api.Entities.ArticlesEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticlesWebApp.Api.Entities.UsersEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.LikesEntity", b =>
                {
                    b.HasOne("ArticlesWebApp.Api.Entities.ArticlesEntity", null)
                        .WithMany("Likes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArticlesWebApp.Api.Entities.UsersEntity", null)
                        .WithMany("Likes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.UsersEntity", b =>
                {
                    b.HasOne("ArticlesWebApp.Api.Entities.RolesEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.ArticlesEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.RolesEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ArticlesWebApp.Api.Entities.UsersEntity", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
